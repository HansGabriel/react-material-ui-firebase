{"version":3,"sources":["layout/LaunchScreen.js","layout/Bar.js","layout/EmptyState.js","content/HomeContent.js","content/NotFoundContent.js","layout/AuthProviderList.js","dialogs/SignUpDialog.js","dialogs/SignInDialog.js","dialogs/ResetPasswordDialog.js","dialogs/ConfirmationDialog.js","tabs/settings/AccountTab.js","tabs/settings/AppearanceTab.js","dialogs/SettingsDialog.js","dialogs/InputDialog.js","App.js","serviceWorker.js","index.js"],"names":["LaunchScreen","classes","this","props","react_default","a","createElement","CircularProgress_default","className","circularProgress","Component","withStyles","theme","position","top","left","Bar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","openMenu","event","anchorEl","currentTarget","setState","menu","closeMenu","handleSettingsClick","onSettingsClick","handleSignOutClick","onSignOutClick","state","_this$props","name","isPerformingAuthAction","isSignedIn","user","_this$props2","onSignUpClick","onSignInClick","AppBar_default","color","Toolbar_default","variant","Typography_default","style","flexGrow","Fragment","IconButton_default","onClick","photoURL","Avatar_default","alt","src","Person_default","Menu_default","open","Boolean","onClose","MenuItem_default","Button_default","signUpButton","disabled","marginRight","spacing","unit","EmptyState","icon","title","description","button","center","transform","textAlign","HomeContent","layout_EmptyState","Home_default","emptyStateIcon","Fab_default","component","Link","to","Code_default","href","rel","target","GithubCircle_default","buttonIcon","fontSize","concat","marginTop","NotFoundContent","FindInPage_default","AuthProviderList","onAuthProviderClick","Hidden_default","only","DialogActions_default","dialogActions","google","firebase","auth","GoogleAuthProvider","Google_default","facebook","FacebookAuthProvider","FacebookBox_default","twitter","TwitterAuthProvider","Twitter_default","gitHub","GithubAuthProvider","dialogActionsMobile","buttonMobile","justifyContent","marginBottom","display","backgroundColor","initialState","emailAddress","password","passwordConfirmation","errors","SignUpDialog","signUp","_this$state","validate","constraints","handleExited","handleKeyPress","key","altKey","ctrlKey","metaKey","shiftKey","handleEmailAddressChange","value","handlePasswordChange","handlePasswordConfirmationChange","handleSignUpClick","fullScreen","_this$state2","Dialog_default","onExited","onKeyPress","DialogTitle_default","DialogContent_default","DialogContentText_default","layout_AuthProviderList","TextField_default","autoComplete","error","fullWidth","helperText","label","margin","onChange","required","type","SignInDialog","signIn","handleSignInClick","onResetPasswordClick","placeholder","ResetPasswordDialog","resetPassword","preventDefault","handleResetPasswordClick","autoFocus","ConfirmationDialog","onOkClick","contentText","cancelText","okText","disableOkButton","highlightOkButton","onCancelClick","AccountTab","openVerifyEmailAddressDialog","verifyEmailAddressDialog","closeVerifyEmailAddressDialog","callback","verifyEmailAddress","onVerifyEmailAddressClick","onAddAvatarClick","onChangeAvatarClick","onAddDisplayNameClick","onChangeDisplayNameClick","onAddEmailAddressClick","isUserComplete","displayName","email","profile","changeAvatarContainer","avatar","Tooltip_default","changeAvatar","size","Edit_default","info","dialogContentTextComplete","dialogContentTextIncomplete","List_default","ListItem_default","ListItemIcon_default","Portrait_default","ListItemText_default","primary","ListItemSecondaryAction_default","secondary","Email_default","emailVerified","metadata","lastSignInTime","AccessTime_default","moment","format","creationTime","dialogs_ConfirmationDialog","width","marginLeft","height","AppearanceTab","colors","types","primaryColor","secondaryColor","onPrimaryColorChange","onSecondaryColorChange","onTypeChange","dialogContentText","FormControl_default","InputLabel_default","Select_default","map","id","index","charAt","toUpperCase","slice","SettingsDialog","changeTab","selectedTab","changeIndex","handleResetClick","defaultTheme","setTimeout","onResetClick","_this$props3","Tabs_default","indicatorColor","textColor","Tab_default","settings_AccountTab","settings_AppearanceTab","lib_default","onChangeIndex","InputDialog","textField","_this$props4","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","import","red","pink","purple","deepPurple","indigo","blue","lightBlue","cyan","teal","green","lightGreen","lime","yellow","amber","orange","deepOrange","brown","gray","blueGray","createMuiTheme","palette","typography","useNextVariants","settings","presence","allowEmpty","length","minimum","equality","addAvatar","url","message","addDisplayName","changeDisplayName","addEmailAddress","App","_isMounted","createUserWithEmailAndPassword","then","closeSignUpDialog","openSnackbar","catch","reason","code","finally","signInWithEmailAndPassword","closeSignInDialog","signInWithProvider","provider","signInWithPopup","sendPasswordResetEmail","closeResetPasswordDialog","addAvatarDialog","objectSpread","updateProfile","closeAddAvatarDialog","changeAvatarDialog","closeChangeAvatarDialog","_this$state3","addDisplayNameDialog","closeAddDisplayNameDialog","_this$state4","changeDisplayNameDialog","closeChangeDisplayNameDialog","_this$state5","addEmailAddressDialog","updateEmail","closeAddEmailAddressDialog","_this$state6","sendEmailVerification","signOut","closeSignOutDialog","updateTheme","removeLocalStorage","_this$state7","find","localStorage","removeItem","setItem","JSON","stringify","resetTheme","changePrimaryColor","changeSecondaryColor","changeType","openSignUpDialog","signUpDialog","openSignInDialog","signInDialog","openResetPasswordDialog","resetPasswordDialog","openSettingsDialog","settingsDialog","closeSettingsDialog","openAddAvatarDialog","openChangeAvatarDialog","openAddDisplayNameDialog","openChangeDisplayNameDialog","openAddEmailAddressDialog","openSignOutDialog","signOutDialog","handleAvatarChange","handleDisplayNameChange","snackbar","autoHideDuration","readingTime","time","closeSnackbar","clearMessage","arguments","undefined","isAuthReady","_this2","_this$state8","_this$state9","react_router_dom","basename","styles","minHeight","layout_LaunchScreen","layout_Bar","react_router","path","exact","render","content_HomeContent","dialogs_SettingsDialog","dialogs_InputDialog","dialogs_SignUpDialog","dialogs_SignInDialog","dialogs_ResetPasswordDialog","Snackbar_default","_this3","parse","getItem","removeAuthObserver","onAuthStateChanged","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f1dec58.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst styles = (theme) => ({\n  circularProgress: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%'\n  }\n});\n\nclass LaunchScreen extends Component {\n  render() {\n    // Styling\n    const { classes } = this.props;\n\n    return (\n      <CircularProgress className={classes.circularProgress} />\n    );\n  }\n}\n\nLaunchScreen.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(LaunchScreen);","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Avatar from '@material-ui/core/Avatar';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport PersonIcon from '@material-ui/icons/Person';\n\nconst styles = (theme) => ({\n  signUpButton: {\n    marginRight: theme.spacing.unit\n  }\n});\n\nclass Bar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      menu: {\n        anchorEl: null\n      }\n    };\n  }\n\n  openMenu = (event) => {\n    const anchorEl = event.currentTarget;\n\n    this.setState({\n      menu: {\n        anchorEl\n      }\n    });\n  };\n\n  closeMenu = () => {\n    this.setState({\n      menu: {\n        anchorEl: null\n      }\n    });\n  };\n\n  handleSettingsClick = () => {\n    this.closeMenu();\n    this.props.onSettingsClick();\n  };\n\n  handleSignOutClick = () => {\n    this.closeMenu();\n    this.props.onSignOutClick();\n  };\n\n  render() {\n    // Styling\n    const { classes } = this.props;\n\n    // Properties\n    const { name, isPerformingAuthAction, isSignedIn, user } = this.props;\n\n    // Events\n    const { onSignUpClick, onSignInClick } = this.props;\n\n    const { menu } = this.state;\n\n    return (\n      <AppBar color=\"primary\" position=\"static\">\n        <Toolbar variant=\"regular\">\n          <Typography style={{ flexGrow: 1 }} color=\"inherit\" variant=\"h6\">{name}</Typography>\n\n          {isSignedIn &&\n            <React.Fragment>\n              <IconButton color=\"inherit\" onClick={this.openMenu}>\n                {user.photoURL ? <Avatar alt=\"Avatar\" src={user.photoURL} /> : <PersonIcon />}\n              </IconButton>\n\n              <Menu anchorEl={menu.anchorEl} open={Boolean(menu.anchorEl)} onClose={this.closeMenu}>\n                <MenuItem onClick={this.handleSettingsClick}>Settings</MenuItem>\n                <MenuItem onClick={this.handleSignOutClick}>Sign out</MenuItem>\n              </Menu>\n            </React.Fragment>\n          }\n\n          {!isSignedIn &&\n            <React.Fragment>\n              <Button className={classes.signUpButton} color=\"secondary\" disabled={isPerformingAuthAction} variant=\"contained\" onClick={onSignUpClick}>Sign Up</Button>\n              <Button color=\"secondary\" disabled={isPerformingAuthAction} variant=\"contained\" onClick={onSignInClick}>Sign In</Button>\n            </React.Fragment>\n          }\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\nBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n  \n  name: PropTypes.string.isRequired,\n  isPerformingAuthAction: PropTypes.bool.isRequired,\n  isSignedIn: PropTypes.bool.isRequired,\n\n  onSettingsClick: PropTypes.func.isRequired,\n  onSignOutClick: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(Bar);","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n  center: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    textAlign: 'center'\n  }\n};\n\nclass EmptyState extends Component {\n  render() {\n    // Styling\n    const { classes } = this.props;\n\n    // Properties\n    const { icon, title, description, button } = this.props;\n\n    return (\n      <div className={classes.center}>\n        {icon}\n        {title && <Typography color=\"textSecondary\" variant=\"h4\">{title}</Typography>}\n        {description && <Typography color=\"textSecondary\" variant=\"subtitle1\">{description}</Typography>}\n        {button}\n      </div>\n    );\n  }\n}\n\nEmptyState.propTypes = {\n  classes: PropTypes.object.isRequired,\n  icon: PropTypes.element,\n  title: PropTypes.string,\n  description: PropTypes.string,\n  button: PropTypes.element\n};\n\nexport default withStyles(styles)(EmptyState);","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'react-router-dom';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Fab from '@material-ui/core/Fab';\n\nimport CodeIcon from '@material-ui/icons/Code';\nimport HomeIcon from '@material-ui/icons/Home';\n\nimport GitHubCircleIcon from 'mdi-material-ui/GithubCircle';\n\nimport EmptyState from '../layout/EmptyState';\n\nconst styles = (theme) => ({\n  emptyStateIcon: {\n    fontSize: `${theme.spacing.unit * 12}px`\n  },\n\n  button: {\n    marginTop: `${theme.spacing.unit}px`\n  },\n\n  buttonIcon: {\n    marginRight: `${theme.spacing.unit}px`\n  }\n});\n\nclass HomeContent extends Component {\n  render() {\n    const { classes } = this.props;\n\n    const { isSignedIn, title } = this.props;\n\n    if (isSignedIn) {\n      return (\n        <EmptyState\n          icon={<HomeIcon className={classes.emptyStateIcon} color=\"action\" />}\n          title=\"Home\"\n          description=\"Use React + Material-UI + Firebase as the starting-point for your project\"\n          button={\n            <Fab className={classes.button} color=\"primary\" component={Link} to=\"/some-magic\" variant=\"extended\">\n              Click For Some Magic\n            </Fab>\n          }\n        />\n      );\n    }\n\n    return (\n      <EmptyState\n        icon={<CodeIcon className={classes.emptyStateIcon} color=\"action\" />}\n        title={title}\n        description=\"The three musketeers, all in one pack in the form of a boilerplate app\"\n        button={\n          <Fab className={classes.button} color=\"primary\" href=\"https://github.com/Phoqe/react-material-ui-firebase\" rel=\"noopener noreferrer\" target=\"_blank\" variant=\"extended\">\n            <GitHubCircleIcon className={classes.buttonIcon} />\n            GitHub\n          </Fab>\n        }\n      />\n    );\n  }\n}\n\nHomeContent.propTypes = {\n  classes: PropTypes.object.isRequired,\n\n  isSignedIn: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired\n};\n\nexport default withStyles(styles)(HomeContent);","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'react-router-dom';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Fab from '@material-ui/core/Fab';\n\nimport FindIcon from '@material-ui/icons/FindInPage';\nimport HomeIcon from '@material-ui/icons/Home';\n\nimport EmptyState from '../layout/EmptyState';\n\nconst styles = (theme) => ({\n  emptyStateIcon: {\n    fontSize: `${theme.spacing.unit * 12}px`\n  },\n\n  button: {\n    marginTop: `${theme.spacing.unit}px`\n  },\n\n  buttonIcon: {\n    marginRight: `${theme.spacing.unit}px`\n  }\n});\n\nclass NotFoundContent extends Component {\n  render() {\n    // Styling\n    const { classes } = this.props;\n\n    return (\n      <EmptyState\n        icon={<FindIcon className={classes.emptyStateIcon} color=\"action\" />}\n        title=\"Content Not Found\"\n        description=\"The requested URL was not found on this server\"\n        button={\n          <Fab className={classes.button} color=\"primary\" component={Link} to=\"/\" variant=\"extended\">\n            <HomeIcon className={classes.buttonIcon} /> Go Home\n          </Fab>\n        }\n      />\n    );\n  }\n}\n\nNotFoundContent.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(NotFoundContent);","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport firebase from 'firebase/app';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Hidden from '@material-ui/core/Hidden';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\n\nimport GoogleIcon from 'mdi-material-ui/Google';\nimport FacebookBoxIcon from 'mdi-material-ui/FacebookBox';\nimport TwitterIcon from 'mdi-material-ui/Twitter';\nimport GitHubCircleIcon from 'mdi-material-ui/GithubCircle';\n\nconst styles = (theme) => ({\n  dialogActions: {\n    justifyContent: 'center',\n\n    marginTop: `${theme.spacing.unit * 2.5}px`,\n    marginBottom: `${theme.spacing.unit}px`\n  },\n\n  dialogActionsMobile: {\n    display: 'grid',\n    justifyContent: 'stretch',\n\n    marginTop: `${theme.spacing.unit * 2.5}px`,\n    marginBottom: `${theme.spacing.unit / 3}px`\n  },\n\n  buttonMobile: {\n    marginBottom: `${theme.spacing.unit * 1.5}px`\n  },\n\n  google: {\n    backgroundColor: '#4285f4',\n    color: '#ffffff'\n  },\n\n  facebook: {\n    backgroundColor: '#3c5a99',\n    color: '#ffffff'\n  },\n\n  twitter: {\n    backgroundColor: '#1da1f2',\n    color: '#ffffff'\n  },\n\n  gitHub: {\n    backgroundColor: '#24292e',\n    color: '#ffffff'\n  },\n\n  icon: {\n    marginRight: `${theme.spacing.unit / 2}px`\n  }\n});\n\nclass AuthProviderList extends Component {\n  render() {\n    // Styling\n    const { classes } = this.props;\n\n    // Properties\n    const { isPerformingAuthAction } = this.props;\n\n    // Events\n    const { onAuthProviderClick } = this.props;\n\n    return (\n      <React.Fragment>\n        <Hidden only=\"xs\">\n          <DialogActions className={classes.dialogActions}>\n            <Button className={classes.google} disabled={isPerformingAuthAction} variant=\"contained\" onClick={() => onAuthProviderClick(new firebase.auth.GoogleAuthProvider())}>\n              <GoogleIcon className={classes.icon} />\n              Google\n            </Button>\n\n            <Button className={classes.facebook} disabled={isPerformingAuthAction} variant=\"contained\" onClick={() => onAuthProviderClick(new firebase.auth.FacebookAuthProvider())}>\n              <FacebookBoxIcon className={classes.icon} />\n              Facebook\n            </Button>\n\n            <Button className={classes.twitter} disabled={isPerformingAuthAction} variant=\"contained\" onClick={() => onAuthProviderClick(new firebase.auth.TwitterAuthProvider())}>\n              <TwitterIcon className={classes.icon} />\n              Twitter\n            </Button>\n\n            <Button className={classes.gitHub} disabled={isPerformingAuthAction} variant=\"contained\" onClick={() => onAuthProviderClick(new firebase.auth.GithubAuthProvider())}>\n              <GitHubCircleIcon className={classes.icon} />\n              GitHub\n            </Button>\n          </DialogActions>\n        </Hidden>\n\n        <Hidden only={['sm', 'md', 'lg', 'xl']}>\n          <DialogActions className={classes.dialogActionsMobile}>\n            <Button className={`${classes.google} ${classes.buttonMobile}`} disabled={isPerformingAuthAction} variant=\"contained\" onClick={() => onAuthProviderClick(new firebase.auth.GoogleAuthProvider())}>\n              <GoogleIcon className={classes.icon} />\n              Google\n            </Button>\n\n            <Button className={`${classes.facebook} ${classes.buttonMobile}`} disabled={isPerformingAuthAction} variant=\"contained\" onClick={() => onAuthProviderClick(new firebase.auth.FacebookAuthProvider())}>\n              <FacebookBoxIcon className={classes.icon} />\n              Facebook\n            </Button>\n\n            <Button className={`${classes.twitter} ${classes.buttonMobile}`} disabled={isPerformingAuthAction} variant=\"contained\" onClick={() => onAuthProviderClick(new firebase.auth.TwitterAuthProvider())}>\n              <TwitterIcon className={classes.icon} />\n              Twitter\n            </Button>\n\n            <Button className={`${classes.gitHub} ${classes.buttonMobile}`} disabled={isPerformingAuthAction} variant=\"contained\" onClick={() => onAuthProviderClick(new firebase.auth.GithubAuthProvider())}>\n              <GitHubCircleIcon className={classes.icon} />\n              GitHub\n            </Button>\n          </DialogActions>\n        </Hidden>\n      </React.Fragment>\n    );\n  }\n}\n\nAuthProviderList.propTypes = {\n  classes: PropTypes.object.isRequired,\n\n  isPerformingAuthAction: PropTypes.bool,\n\n  onAuthProviderClick: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(AuthProviderList);","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport validate from 'validate.js';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport AuthProviderList from '../layout/AuthProviderList';\n\nconst initialState = {\n  emailAddress: '',\n  password: '',\n  passwordConfirmation: '',\n\n  errors: null\n};\n\nclass SignUpDialog extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = initialState;\n  }\n\n  signUp = () => {\n    const { emailAddress, password, passwordConfirmation } = this.state;\n    \n    const errors = validate({ emailAddress, password, passwordConfirmation }, this.props.constraints);\n\n    if (errors) {\n      this.setState({ errors });\n    } else {\n      this.setState({\n        errors: null\n      }, () => {\n        this.props.signUp(emailAddress, password, passwordConfirmation);\n      });\n    }\n  };\n\n  handleExited = () => {\n    this.setState(initialState);\n  };\n\n  handleKeyPress = (event) => {\n    const key = event.key;\n\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n      return;\n    }\n\n    if (key === 'Enter') {\n      this.signUp();\n    }\n  };\n\n  handleEmailAddressChange = (event) => {\n    const emailAddress = event.target.value;\n\n    this.setState({ emailAddress });\n  };\n\n  handlePasswordChange = (event) => {\n    const password = event.target.value;\n\n    this.setState({ password });\n  };\n\n  handlePasswordConfirmationChange = (event) => {\n    const passwordConfirmation = event.target.value;\n\n    this.setState({ passwordConfirmation });\n  };\n\n  handleSignUpClick = () => {\n    this.signUp();\n  };\n\n  render() {\n    // Properties\n    const { fullScreen, open, isPerformingAuthAction } = this.props;\n\n    // Events\n    const { onClose, onAuthProviderClick } = this.props;\n\n    const { emailAddress, password, passwordConfirmation, errors } = this.state;\n\n    return (\n      <Dialog fullScreen={fullScreen} open={open} onClose={onClose} onExited={this.handleExited} onKeyPress={this.handleKeyPress}>\n        <DialogTitle>\n          Sign up for an account\n        </DialogTitle>\n\n        <DialogContent>\n          <DialogContentText>\n            Create an account to access features that are unavailable to users who haven't signed up.\n          </DialogContentText>\n\n          <AuthProviderList isPerformingAuthAction={isPerformingAuthAction} onAuthProviderClick={onAuthProviderClick} />\n\n          <form>\n            <TextField\n              autoComplete=\"email\"\n              error={!!(errors && errors.emailAddress)}\n              fullWidth\n              helperText={(errors && errors.emailAddress) ? errors.emailAddress[0] : ''}\n              label=\"E-mail address\"\n              margin=\"normal\"\n              onChange={this.handleEmailAddressChange}\n              required\n              type=\"email\"\n              value={emailAddress}\n            />\n\n            <TextField\n              autoComplete=\"new-password\"\n              error={!!(errors && errors.password)}\n              fullWidth\n              helperText={(errors && errors.password) ? errors.password[0] : ''}\n              label=\"Password\"\n              margin=\"normal\"\n              onChange={this.handlePasswordChange}\n              required\n              type=\"password\"\n              value={password}\n            />\n\n            <TextField\n              autoComplete=\"password\"\n              error={!!(errors && errors.passwordConfirmation)}\n              fullWidth\n              helperText={(errors && errors.passwordConfirmation) ? errors.passwordConfirmation[0] : ''}\n              label=\"Password confirmation\"\n              margin=\"normal\"\n              onChange={this.handlePasswordConfirmationChange}\n              required\n              type=\"password\"\n              value={passwordConfirmation}\n            />\n          </form>\n        </DialogContent>\n\n        <DialogActions>\n          <Button color=\"primary\" onClick={onClose}>Cancel</Button>\n          <Button color=\"primary\" disabled={(!emailAddress || !password || !passwordConfirmation) || isPerformingAuthAction} variant=\"contained\" onClick={this.handleSignUpClick}>Sign Up</Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nSignUpDialog.propTypes = {\n  fullScreen: PropTypes.bool,\n  open: PropTypes.bool.isRequired,\n\n  isPerformingAuthAction: PropTypes.bool.isRequired,\n\n  constraints: PropTypes.object.isRequired,\n\n  signUp: PropTypes.func.isRequired,\n\n  onClose: PropTypes.func.isRequired,\n  onAuthProviderClick: PropTypes.func.isRequired\n};\n\nexport default SignUpDialog;","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport validate from 'validate.js';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport AuthProviderList from '../layout/AuthProviderList';\n\nconst initialState = {\n  emailAddress: '',\n  password: '',\n\n  errors: null\n};\n\nclass SignInDialog extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = initialState;\n  }\n\n  signIn = () => {\n    const { emailAddress, password } = this.state;\n    \n    const errors = validate({ emailAddress, password }, this.props.constraints);\n\n    if (errors) {\n      this.setState({ errors });\n    } else {\n      this.setState({\n        errors: null\n      }, () => {\n        this.props.signIn(emailAddress, password);\n      });\n    }\n  };\n\n  handleExited = () => {\n    this.setState(initialState);\n  };\n\n  handleKeyPress = (event) => {\n    const key = event.key;\n\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n      return;\n    }\n\n    if (key === 'Enter') {\n      this.signIn();\n    }\n  };\n\n  handleEmailAddressChange = (event) => {\n    const emailAddress = event.target.value;\n\n    this.setState({ emailAddress });\n  };\n\n  handlePasswordChange = (event) => {\n    const password = event.target.value;\n\n    this.setState({ password });\n  };\n\n  handleSignInClick = () => {\n    this.signIn();\n  };\n\n  render() {\n    // Properties\n    const { fullScreen, open, isPerformingAuthAction } = this.props;\n\n    // Events\n    const { onClose, onAuthProviderClick, onResetPasswordClick } = this.props;\n\n    const { emailAddress, password, errors } = this.state;\n\n    return (\n      <Dialog fullScreen={fullScreen} open={open} onClose={onClose} onExited={this.handleExited} onKeyPress={this.handleKeyPress}>\n        <DialogTitle>\n          Sign in to your account\n        </DialogTitle>\n\n        <DialogContent>\n          <DialogContentText>\n            Some features might be unavailable until you sign in.\n            While you're signed in you can manage your account.\n          </DialogContentText>\n\n          <AuthProviderList isPerformingAuthAction={isPerformingAuthAction} onAuthProviderClick={onAuthProviderClick} />\n\n          <form>\n            <TextField\n              autoComplete=\"email\"\n              error={!!(errors && errors.emailAddress)}\n              fullWidth\n              helperText={(errors && errors.emailAddress) ? errors.emailAddress[0] : ''}\n              margin=\"normal\"\n              onChange={this.handleEmailAddressChange}\n              placeholder=\"E-mail address\"\n              required\n              type=\"email\"\n              value={emailAddress}\n            />\n\n            <TextField\n              autoComplete=\"current-password\"\n              error={!!(errors && errors.password)}\n              fullWidth\n              helperText={(errors && errors.password) ? errors.password[0] : ''}\n              margin=\"normal\"\n              onChange={this.handlePasswordChange}\n              placeholder=\"Password\"\n              required\n              type=\"password\"\n              value={password}\n            />\n          </form>\n        </DialogContent>\n\n        <DialogActions>\n          <Button color=\"primary\" onClick={onClose}>Cancel</Button>\n          <Button color=\"primary\" variant=\"outlined\" onClick={onResetPasswordClick}>Reset Password</Button>\n          <Button color=\"primary\" disabled={(!emailAddress || !password) || isPerformingAuthAction} variant=\"contained\" onClick={this.handleSignInClick}>Sign In</Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nSignInDialog.propTypes = {\n  fullScreen: PropTypes.bool,\n  open: PropTypes.bool.isRequired,\n\n  isPerformingAuthAction: PropTypes.bool.isRequired,\n\n  constraints: PropTypes.object.isRequired,\n\n  signIn: PropTypes.func.isRequired,\n\n  onClose: PropTypes.func.isRequired,\n  onAuthProviderClick: PropTypes.func.isRequired,\n  onResetPasswordClick: PropTypes.func.isRequired\n};\n\nexport default SignInDialog;","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport validate from 'validate.js';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nconst initialState = {\n  emailAddress: '',\n\n  errors: null\n};\n\nclass ResetPasswordDialog extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = initialState;\n  }\n\n  resetPassword = () => {\n    const { emailAddress } = this.state;\n    \n    const errors = validate({ emailAddress }, this.props.constraints);\n\n    if (errors) {\n      this.setState({ errors });\n    } else {\n      this.setState({\n        errors: null\n      }, () => {\n        this.props.resetPassword(emailAddress);\n      });\n    }\n  };\n\n  handleExited = () => {\n    this.setState(initialState);\n  };\n\n  handleKeyPress = (event) => {\n    const key = event.key;\n\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n      return;\n    }\n\n    if (key === 'Enter') {\n      event.preventDefault();\n\n      this.resetPassword();\n    }\n  };\n\n  handleEmailAddressChange = (event) => {\n    const emailAddress = event.target.value;\n\n    this.setState({ emailAddress });\n  };\n\n  handleResetPasswordClick = () => {\n    this.resetPassword();\n  };\n\n  render() {\n    // Properties\n    const { open, isPerformingAuthAction } = this.props;\n\n    // Events\n    const { onClose } = this.props;\n\n    const { emailAddress, errors } = this.state;\n\n    return (\n      <Dialog open={open} onClose={onClose} onExited={this.handleExited} onKeyPress={this.handleKeyPress}>\n        <DialogTitle>\n          Reset your password\n        </DialogTitle>\n\n        <DialogContent>\n          <DialogContentText>\n            An e-mail will be sent to your e-mail address containing instructions on how to reset your password.\n          </DialogContentText>\n\n          <form>\n            <TextField\n              autoComplete=\"email\"\n              autoFocus\n              error={!!(errors && errors.emailAddress)}\n              fullWidth\n              helperText={(errors && errors.emailAddress) ? errors.emailAddress[0] : ''}\n              margin=\"normal\"\n              onChange={this.handleEmailAddressChange}\n              placeholder=\"E-mail address\"\n              required\n              type=\"email\"\n              value={emailAddress}\n            />\n          </form>\n        </DialogContent>\n\n        <DialogActions>\n          <Button color=\"primary\" onClick={onClose}>Cancel</Button>\n          <Button color=\"primary\" disabled={!emailAddress || isPerformingAuthAction} variant=\"contained\" onClick={this.handleResetPasswordClick}>Reset Password</Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nResetPasswordDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n\n  isPerformingAuthAction: PropTypes.bool.isRequired,\n\n  constraints: PropTypes.object.isRequired,\n\n  resetPassword: PropTypes.func.isRequired,\n\n  onClose: PropTypes.func.isRequired\n};\n\nexport default ResetPasswordDialog;","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport Button from '@material-ui/core/Button';\n\n/**\n * Confirmation dialogs give users the ability to provide final confirmation of a choice\n * before committing to it, so they have a chance to change their minds if necessary.\n * If the user confirms a choice, it’s carried out. Otherwise, the user can dismiss the\n * dialog. For example, users can listen to multiple ringtones but only make a final\n * selection upon touching “OK.”\n */\nclass ConfirmationDialog extends Component {\n  handleKeyPress = (event) => {\n    const key = event.key;\n\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n      return;\n    }\n\n    if (key === 'Enter') {\n      this.props.onOkClick();\n    }\n  };\n\n  render() {\n    /**\n     * Properties\n     */\n\n    // Dialog\n    const { open } = this.props;\n\n    // Custom\n    const { title, contentText, cancelText, okText, disableOkButton, highlightOkButton } = this.props;\n\n    /**\n     * Events\n     */\n\n    // Dialog\n    const { onClose } = this.props;\n\n    // Custom\n    const { onCancelClick, onOkClick } = this.props;\n\n    if (!onClose) {\n      return null;\n    }\n\n    return (\n      <Dialog open={open} onClose={onClose} onKeyPress={this.handleKeyPress}>\n        {title && <DialogTitle>{title}</DialogTitle>}\n\n        {contentText &&\n          <DialogContent>\n            <DialogContentText>{contentText}</DialogContentText>\n          </DialogContent>\n        }\n\n        {(onCancelClick || onOkClick) &&\n          <DialogActions>\n            {onCancelClick &&\n              <Button color=\"primary\" onClick={onCancelClick}>\n                {cancelText || 'Cancel'}\n              </Button>\n            }\n\n            {onOkClick &&\n              <Button color=\"primary\" disabled={disableOkButton} variant={highlightOkButton && 'contained'} onClick={onOkClick}>\n                {okText || 'OK'}\n              </Button>\n            }\n          </DialogActions>\n        }\n      </Dialog>\n    );\n  }\n}\n\nConfirmationDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n\n  title: PropTypes.string,\n  contentText: PropTypes.string,\n  cancelText: PropTypes.string,\n  okText: PropTypes.string,\n  disableOkButton: PropTypes.bool,\n  highlightOkButton: PropTypes.bool,\n\n  onClose: PropTypes.func.isRequired,\n  onCancelClick: PropTypes.func,\n  onOkClick: PropTypes.func\n};\n\nexport default ConfirmationDialog;","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport moment from 'moment';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Fab from '@material-ui/core/Fab';\nimport Typography from '@material-ui/core/Typography';\n\nimport DialogContentText from '@material-ui/core/DialogContentText';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\n\nimport EditIcon from '@material-ui/icons/Edit';\nimport PortraitIcon from '@material-ui/icons/Portrait';\nimport PersonIcon from '@material-ui/icons/Person';\nimport EmailIcon from '@material-ui/icons/Email';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\n\nimport ConfirmationDialog from '../../dialogs/ConfirmationDialog';\n\nconst styles = (theme) => ({\n  profile: {\n    marginTop: `${theme.spacing.unit * 2}px`,\n    textAlign: 'center'\n  },\n\n  changeAvatarContainer: {\n    position: 'relative',\n    width: '50%',\n    marginLeft: 'auto',\n    marginRight: 'auto'\n  },\n\n  avatar: {\n    width: `${theme.spacing.unit * 12}px`,\n    height: `${theme.spacing.unit * 12}px`,\n    marginRight: 'auto',\n    marginLeft: 'auto'\n  },\n\n  changeAvatar: {\n    position: 'absolute',\n    top: '-7.5%',\n    left: '60%',\n  },\n\n  info: {\n    marginTop: `${theme.spacing.unit * 0.5}px`\n  },\n\n  emailAddress: {\n    marginTop: `-${theme.spacing.unit * 0.5}px`\n  },\n\n  dialogContentTextComplete: {\n    marginTop: `${theme.spacing.unit}px`\n  },\n\n  dialogContentTextIncomplete: {\n    marginTop: `${theme.spacing.unit * 2}px`\n  }\n});\n\nclass AccountTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      verifyEmailAddressDialog: {\n        open: false\n      }\n    };\n  }\n\n  openVerifyEmailAddressDialog = () => {\n    this.setState({\n      verifyEmailAddressDialog: {\n        open: true\n      }\n    });\n  };\n\n  closeVerifyEmailAddressDialog = (callback) => {\n    this.setState({\n      verifyEmailAddressDialog: {\n        open: false\n      }\n    }, () => {\n      if (callback && typeof callback === 'function') {\n        callback();\n      }\n    });\n  };\n\n  verifyEmailAddress = () => {\n    this.closeVerifyEmailAddressDialog(() => {\n      this.props.onVerifyEmailAddressClick();\n    });\n  };\n\n  render() {\n    // Styling\n    const { classes } = this.props;\n\n    // Properties\n    const { user, isPerformingAuthAction } = this.props;\n\n    // Events\n    const { onAddAvatarClick, onChangeAvatarClick, onAddDisplayNameClick, onChangeDisplayNameClick, onAddEmailAddressClick } = this.props;\n\n    const { verifyEmailAddressDialog } = this.state;\n\n    const isUserComplete = (user.photoURL && user.displayName && user.email);\n\n    return (\n      <React.Fragment>\n        {isUserComplete &&\n          <div className={classes.profile}>\n            <div className={classes.changeAvatarContainer}>\n              <Avatar className={classes.avatar} alt=\"Avatar\" src={user.photoURL} />\n\n              <Tooltip title=\"Change avatar\">\n                <Fab className={classes.changeAvatar} color=\"primary\" size=\"small\" onClick={onChangeAvatarClick}>\n                  <EditIcon />\n                </Fab>\n              </Tooltip>\n            </div>\n\n            <div className={classes.info}>\n              <Typography variant=\"h6\">{user.displayName}</Typography>\n              <Typography className={classes.emailAddress} color=\"textSecondary\" variant=\"body1\">{user.email}</Typography>\n            </div>\n          </div>\n        }\n\n        <DialogContentText className={isUserComplete ? classes.dialogContentTextComplete : classes.dialogContentTextIncomplete}>\n          Here's some info about your account. You can manage your account through the tabs.\n        </DialogContentText>\n\n        <List>\n          {!user.photoURL &&\n            <ListItem>\n              <ListItemIcon>\n                <Tooltip title=\"Avatar\">\n                  <PortraitIcon />\n                </Tooltip>\n              </ListItemIcon>\n\n              <ListItemText primary=\"You don't have an avatar. Add one!\" />\n\n              <ListItemSecondaryAction>\n                <Button color=\"primary\" variant=\"contained\" onClick={onAddAvatarClick}>Add</Button>\n              </ListItemSecondaryAction>\n            </ListItem>\n          }\n\n          {user.displayName &&\n            <ListItem>\n              <ListItemIcon>\n                <Tooltip title=\"Display name\">\n                  <PersonIcon />\n                </Tooltip>\n              </ListItemIcon>\n\n              <ListItemText primary=\"Display name\" secondary={user.displayName} />\n\n              <ListItemSecondaryAction>\n                <Tooltip title=\"Edit\">\n                  <IconButton onClick={onChangeDisplayNameClick}>\n                    <EditIcon />\n                  </IconButton>\n                </Tooltip>\n              </ListItemSecondaryAction>\n            </ListItem>\n          }\n\n          {!user.displayName &&\n            <ListItem>\n              <ListItemIcon>\n                <Tooltip title=\"Display name\">\n                  <PersonIcon />\n                </Tooltip>\n              </ListItemIcon>\n\n              <ListItemText primary=\"You don't have a display name. Add one!\" />\n\n              <ListItemSecondaryAction>\n                <Button color=\"primary\" variant=\"contained\" onClick={onAddDisplayNameClick}>Add</Button>\n              </ListItemSecondaryAction>\n            </ListItem>\n          }\n\n          {user.email &&\n            <ListItem>\n              <ListItemIcon>\n                <Tooltip title=\"E-mail address\">\n                  <EmailIcon />\n                </Tooltip>\n              </ListItemIcon>\n\n              <ListItemText primary={user.email} secondary={user.emailVerified ? 'Verified' : 'Not verified'} />\n\n              {!user.emailVerified &&\n                <ListItemSecondaryAction>\n                  <Button color=\"primary\" disabled={isPerformingAuthAction} variant=\"contained\" onClick={this.openVerifyEmailAddressDialog}>Verify</Button>\n                </ListItemSecondaryAction>\n              }\n            </ListItem>\n          }\n\n          {!user.email &&\n            <ListItem>\n              <ListItemIcon>\n                <Tooltip title=\"E-mail address\">\n                  <EmailIcon />\n                </Tooltip>\n              </ListItemIcon>\n\n              <ListItemText primary=\"You don't have an e-mail address. Add one!\" />\n\n              <ListItemSecondaryAction>\n                <Button color=\"primary\" variant=\"contained\" onClick={onAddEmailAddressClick}>Add</Button>\n              </ListItemSecondaryAction>\n            </ListItem>\n          }\n\n          {user.metadata.lastSignInTime &&\n            <ListItem>\n              <ListItemIcon>\n                <Tooltip title=\"Last sign-in\">\n                  <AccessTimeIcon />\n                </Tooltip>\n              </ListItemIcon>\n\n              <ListItemText primary=\"Last sign-in\" secondary={moment(user.metadata.lastSignInTime).format('LLLL')} />\n            </ListItem>\n          }\n\n          {user.metadata.creationTime &&\n            <ListItem>\n              <ListItemIcon>\n                <Tooltip title=\"Signed up\">\n                  <AccessTimeIcon />\n                </Tooltip>\n              </ListItemIcon>\n\n              <ListItemText primary=\"Signed up\" secondary={moment(user.metadata.creationTime).format('LLLL')} />\n            </ListItem>\n          }\n        </List>\n\n        <ConfirmationDialog\n          open={verifyEmailAddressDialog.open}\n\n          title=\"Send verification e-mail?\"\n          contentText=\"An e-mail will be sent to your e-mail address containing instructions on how to verify your e-mail address.\"\n          okText=\"Send\"\n          highlightOkButton\n\n          onClose={this.closeVerifyEmailAddressDialog}\n\n          onCancelClick={this.closeVerifyEmailAddressDialog}\n          onOkClick={this.verifyEmailAddress}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nAccountTab.propTypes = {\n  classes: PropTypes.object.isRequired,\n\n  user: PropTypes.object.isRequired,\n  isPerformingAuthAction: PropTypes.bool.isRequired,\n\n  onAddAvatarClick: PropTypes.func.isRequired,\n  onChangeAvatarClick: PropTypes.func.isRequired,\n  onAddDisplayNameClick: PropTypes.func.isRequired,\n  onChangeDisplayNameClick: PropTypes.func.isRequired,\n  onAddEmailAddressClick: PropTypes.func.isRequired,\n  onVerifyEmailAddressClick: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(AccountTab);","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst styles = (theme) => ({\n  dialogContentText: {\n    marginTop: `${theme.spacing.unit * 2}px`\n  }\n});\n\nclass AppearanceTab extends Component {\n  render() {\n    // Styling\n    const { classes } = this.props;\n\n    // Properties\n    const { colors, types, primaryColor, secondaryColor, type } = this.props;\n\n    // Events\n    const { onPrimaryColorChange, onSecondaryColorChange, onTypeChange } = this.props;\n\n    return (\n      <React.Fragment>\n        <DialogContentText className={classes.dialogContentText}>\n          Customize the look and feel to your own liking.\n          You can reset all changes you've made by clicking Reset.\n        </DialogContentText>\n\n        <FormControl fullWidth margin=\"normal\">\n          <InputLabel>Primary color</InputLabel>\n\n          <Select onChange={onPrimaryColorChange} value={primaryColor}>\n            {colors.map((color) => {\n              return (<MenuItem key={color.id} value={color.id}>{color.name}</MenuItem>);\n            })}\n          </Select>\n        </FormControl>\n\n        <FormControl fullWidth margin=\"normal\">\n          <InputLabel>Secondary color</InputLabel>\n\n          <Select onChange={onSecondaryColorChange} value={secondaryColor}>\n            {colors.map((color) => {\n              return (<MenuItem key={color.id} value={color.id}>{color.name}</MenuItem>);\n            })}\n          </Select>\n        </FormControl>\n\n        <FormControl fullWidth margin=\"normal\">\n          <InputLabel>Type</InputLabel>\n\n          <Select onChange={onTypeChange} value={type}>\n            {types.map((type, index) => {\n              return (<MenuItem key={index} value={type}>{type.charAt(0).toUpperCase() + type.slice(1)}</MenuItem>);\n            })}\n          </Select>\n        </FormControl>\n      </React.Fragment>\n    );\n  }\n}\n\nAppearanceTab.propTypes = {\n  classes: PropTypes.object.isRequired,\n\n  colors: PropTypes.array.isRequired,\n  types: PropTypes.array.isRequired,\n  primaryColor: PropTypes.string.isRequired,\n  secondaryColor: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n\n  onPrimaryColorChange: PropTypes.func.isRequired,\n  onSecondaryColorChange: PropTypes.func.isRequired,\n  onTypeChange: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(AppearanceTab);","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Button from '@material-ui/core/Button';\nimport Hidden from '@material-ui/core/Hidden';\n\nimport SwipeableViews from 'react-swipeable-views';\n\nimport AccountTab from '../tabs/settings/AccountTab';\nimport AppearanceTab from '../tabs/settings/AppearanceTab';\n\nclass SettingsDialog extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedTab: 0\n    };\n  }\n\n  handleKeyPress = (event) => {\n    const key = event.key;\n\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n      return;\n    }\n\n    if (key === 'Enter') {\n      this.props.onClose();\n    }\n  };\n\n  changeTab = (event, value) => {\n    this.setState({\n      selectedTab: value\n    });\n  };\n\n  changeIndex = (index) => {\n    this.setState({\n      selectedTab: index\n    });\n  };\n\n  handleResetClick = () => {\n    const { primaryColor, secondaryColor, type, defaultTheme } = this.props;\n\n    if (primaryColor !== defaultTheme.primaryColor || secondaryColor !== defaultTheme.secondaryColor || type !== defaultTheme.type) {\n      setTimeout(this.props.onResetClick, 137.5);\n    }\n  };\n\n  render() {\n    // Properties\n    const { fullScreen, open, user, isPerformingAuthAction, colors, types, primaryColor, secondaryColor, type } = this.props;\n\n    // Events\n    const {\n      onClose,\n      onAddAvatarClick,\n      onChangeAvatarClick,\n      onAddDisplayNameClick,\n      onChangeDisplayNameClick,\n      onAddEmailAddressClick,\n      onVerifyEmailAddressClick,\n      onPrimaryColorChange,\n      onSecondaryColorChange,\n      onTypeChange\n    } = this.props;\n\n    const { selectedTab } = this.state;\n\n    return (\n      <Dialog fullScreen={fullScreen} open={open} onClose={onClose} onKeyPress={this.handleKeyPress}>\n        <DialogTitle>Settings</DialogTitle>\n\n        <Tabs indicatorColor=\"primary\" textColor=\"primary\" onChange={this.changeTab} value={selectedTab} variant=\"fullWidth\">\n          <Tab label=\"Account\" />\n          <Tab label=\"Appearance\" />\n        </Tabs>\n\n        <DialogContent>\n          <Hidden only=\"xs\">\n            {selectedTab === 0 &&\n              <AccountTab\n                user={user}\n                isPerformingAuthAction={isPerformingAuthAction}\n                onAddAvatarClick={onAddAvatarClick}\n                onChangeAvatarClick={onChangeAvatarClick}\n                onAddDisplayNameClick={onAddDisplayNameClick}\n                onChangeDisplayNameClick={onChangeDisplayNameClick}\n                onAddEmailAddressClick={onAddEmailAddressClick}\n                onVerifyEmailAddressClick={onVerifyEmailAddressClick}\n              />\n            }\n\n            {selectedTab === 1 &&\n              <AppearanceTab\n                colors={colors}\n                types={types}\n                primaryColor={primaryColor}\n                secondaryColor={secondaryColor}\n                type={type}\n                onPrimaryColorChange={onPrimaryColorChange}\n                onSecondaryColorChange={onSecondaryColorChange}\n                onTypeChange={onTypeChange}\n              />\n            }\n          </Hidden>\n\n          <Hidden only={['sm', 'md', 'lg', 'xl']}>\n            <SwipeableViews index={selectedTab} onChangeIndex={this.changeIndex}>\n              <AccountTab\n                user={user}\n                isPerformingAuthAction={isPerformingAuthAction}\n                onAddAvatarClick={onAddAvatarClick}\n                onChangeAvatarClick={onChangeAvatarClick}\n                onAddDisplayNameClick={onAddDisplayNameClick}\n                onChangeDisplayNameClick={onChangeDisplayNameClick}\n                onAddEmailAddressClick={onAddEmailAddressClick}\n                onVerifyEmailAddressClick={onVerifyEmailAddressClick}\n              />\n\n              <AppearanceTab\n                colors={colors}\n                types={types}\n                primaryColor={primaryColor}\n                secondaryColor={secondaryColor}\n                type={type}\n                onPrimaryColorChange={onPrimaryColorChange}\n                onSecondaryColorChange={onSecondaryColorChange}\n                onTypeChange={onTypeChange}\n              />\n            </SwipeableViews>\n          </Hidden>\n        </DialogContent>\n\n        <DialogActions>\n          <Button color=\"primary\" onClick={onClose}>Cancel</Button>\n          <Button color=\"primary\" variant=\"outlined\" onClick={this.handleResetClick}>Reset</Button>\n          <Button color=\"primary\" variant=\"contained\" onClick={onClose}>OK</Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nSettingsDialog.propTypes = {\n  fullScreen: PropTypes.bool,\n  open: PropTypes.bool.isRequired,\n\n  user: PropTypes.object.isRequired,\n  isPerformingAuthAction: PropTypes.bool.isRequired,\n  colors: PropTypes.array.isRequired,\n  types: PropTypes.array.isRequired,\n  primaryColor: PropTypes.string.isRequired,\n  secondaryColor: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n\n  onClose: PropTypes.func.isRequired,\n  onAddAvatarClick: PropTypes.func.isRequired,\n  onChangeAvatarClick: PropTypes.func.isRequired,\n  onAddDisplayNameClick: PropTypes.func.isRequired,\n  onChangeDisplayNameClick: PropTypes.func.isRequired,\n  onAddEmailAddressClick: PropTypes.func.isRequired,\n  onVerifyEmailAddressClick: PropTypes.func.isRequired,\n  onPrimaryColorChange: PropTypes.func.isRequired,\n  onSecondaryColorChange: PropTypes.func.isRequired,\n  onTypeChange: PropTypes.func.isRequired,\n  onResetClick: PropTypes.func.isRequired\n};\n\nexport default SettingsDialog;","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport Button from '@material-ui/core/Button';\n\nclass InputDialog extends Component {\n  handleKeyPress = (event) => {\n    const key = event.key;\n\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n      return;\n    }\n\n    if (key === 'Enter') {\n      event.preventDefault();\n\n      this.props.onOkClick();\n    }\n  };\n\n  render() {\n    /**\n     * Properties\n     */\n\n    // Dialog\n    const { fullScreen, open } = this.props;\n\n    // Custom\n    const { title, contentText, textField, cancelText, okText, disableOkButton, highlightOkButton } = this.props;\n\n    /**\n     * Events\n     */\n\n    // Dialog\n    const { onClose, onExited } = this.props;\n\n    // Custom\n    const { onCancelClick, onOkClick } = this.props;\n\n    if (!onClose) {\n      return null;\n    }\n\n    return (\n      <Dialog fullScreen={fullScreen} open={open} onClose={onClose} onExited={onExited} onKeyPress={this.handleKeyPress}>\n        {title && <DialogTitle>{title}</DialogTitle>}\n\n        {contentText &&\n          <DialogContent>\n            <DialogContentText>{contentText}</DialogContentText>\n\n            {textField &&\n              <form>\n                {textField}\n              </form>\n            }\n          </DialogContent>\n        }\n\n        {(onCancelClick || onOkClick) &&\n          <DialogActions>\n            {onCancelClick &&\n              <Button color=\"primary\" onClick={onCancelClick}>\n                {cancelText || 'Cancel'}\n              </Button>\n            }\n\n            {onOkClick &&\n              <Button color=\"primary\" disabled={disableOkButton} variant={highlightOkButton && 'contained'} onClick={onOkClick}>\n                {okText || 'OK'}\n              </Button>\n            }\n          </DialogActions>\n        }\n      </Dialog>\n    );\n  }\n}\n\nInputDialog.propTypes = {\n  fullScreen: PropTypes.bool,\n  open: PropTypes.bool.isRequired,\n\n  title: PropTypes.string,\n  contentText: PropTypes.string,\n  textField: PropTypes.element,\n  cancelText: PropTypes.string,\n  okText: PropTypes.string,\n  disableOkButton: PropTypes.bool,\n  highlightOkButton: PropTypes.bool,\n\n  onClose: PropTypes.func.isRequired,\n  onExited: PropTypes.func,\n  onCancelClick: PropTypes.func,\n  onOkClick: PropTypes.func\n};\n\nexport default InputDialog;","import React, { Component } from 'react';\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport validate from 'validate.js';\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport readingTime from 'reading-time';\n\nimport red from '@material-ui/core/colors/red';\nimport pink from '@material-ui/core/colors/pink';\nimport purple from '@material-ui/core/colors/purple';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\nimport indigo from '@material-ui/core/colors/indigo';\nimport blue from '@material-ui/core/colors/blue';\nimport lightBlue from '@material-ui/core/colors/lightBlue';\nimport cyan from '@material-ui/core/colors/cyan';\nimport teal from '@material-ui/core/colors/teal';\nimport green from '@material-ui/core/colors/green';\nimport lightGreen from '@material-ui/core/colors/lightGreen';\nimport lime from '@material-ui/core/colors/lime';\nimport yellow from '@material-ui/core/colors/yellow';\nimport amber from '@material-ui/core/colors/amber';\nimport orange from '@material-ui/core/colors/orange';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\nimport brown from '@material-ui/core/colors/brown';\nimport gray from '@material-ui/core/colors/grey';\nimport blueGray from '@material-ui/core/colors/blueGrey';\n\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\n\nimport Hidden from '@material-ui/core/Hidden';\nimport TextField from '@material-ui/core/TextField';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport LaunchScreen from './layout/LaunchScreen';\n\nimport Bar from './layout/Bar';\n\nimport HomeContent from './content/HomeContent';\nimport NotFoundContent from './content/NotFoundContent';\n\nimport SignUpDialog from './dialogs/SignUpDialog';\nimport SignInDialog from './dialogs/SignInDialog';\nimport ResetPasswordDialog from './dialogs/ResetPasswordDialog';\nimport SettingsDialog from './dialogs/SettingsDialog';\nimport InputDialog from './dialogs/InputDialog';\nimport ConfirmationDialog from './dialogs/ConfirmationDialog';\n\n/**\n * Firebase\n */\n\nconst config = {\n  apiKey: 'AIzaSyDYZOrZVpXkPQD6J31mb9t2eIIxmGEJK-Q',\n  authDomain: 'react-material-ui-firebase.firebaseapp.com',\n  databaseURL: 'https://react-material-ui-firebase.firebaseio.com',\n  projectId: 'react-material-ui-firebase',\n  storageBucket: 'react-material-ui-firebase.appspot.com',\n  messagingSenderId: '552659850812'\n};\n\nfirebase.initializeApp(config);\n\nconst auth = firebase.auth();\n\n/**\n * Theming\n */\n\nconst colors = [\n  {\n    id: 'red',\n    name: 'Red',\n    import: red\n  },\n  {\n    id: 'pink',\n    name: 'Pink',\n    import: pink\n  },\n  {\n    id: 'purple',\n    name: 'Purple',\n    import: purple\n  },\n  {\n    id: 'deep-purple',\n    name: 'Deep Purple',\n    import: deepPurple\n  },\n  {\n    id: 'indigo',\n    name: 'Indigo',\n    import: indigo\n  },\n  {\n    id: 'blue',\n    name: 'Blue',\n    import: blue\n  },\n  {\n    id: 'light-blue',\n    name: 'Light Blue',\n    import: lightBlue\n  },\n  {\n    id: 'cyan',\n    name: 'Cyan',\n    import: cyan\n  },\n  {\n    id: 'teal',\n    name: 'Teal',\n    import: teal\n  },\n  {\n    id: 'green',\n    name: 'Green',\n    import: green\n  },\n  {\n    id: 'light-green',\n    name: 'Light Green',\n    import: lightGreen\n  },\n  {\n    id: 'lime',\n    name: 'Lime',\n    import: lime\n  },\n  {\n    id: 'yellow',\n    name: 'Yellow',\n    import: yellow\n  },\n  {\n    id: 'amber',\n    name: 'Amber',\n    import: amber\n  },\n  {\n    id: 'orange',\n    name: 'Orange',\n    import: orange\n  },\n  {\n    id: 'deep-orange',\n    name: 'Deep Orange',\n    import: deepOrange\n  },\n  {\n    id: 'brown',\n    name: 'Brown',\n    import: brown\n  },\n  {\n    id: 'gray',\n    name: 'Gray',\n    import: gray\n  },\n  {\n    id: 'blue-gray',\n    name: 'Blue Gray',\n    import: blueGray\n  }\n];\n\nconst types = [\n  'light',\n  'dark'\n];\n\nconst defaultTheme = {\n  primaryColor: 'blue',\n  secondaryColor: 'red',\n  type: 'light'\n};\n\nlet theme = createMuiTheme({\n  palette: {\n    primary: blue,\n    secondary: red,\n    type: 'light'\n  },\n\n  typography: {\n    useNextVariants: true\n  }\n});\n\n/**\n * Settings\n */\n\nconst settings = {\n  name: 'React + Material-UI + Firebase'\n};\n\nconst constraints = {\n  signUp: {\n    emailAddress: {\n      email: true,\n      presence: {\n        allowEmpty: false\n      }\n    },\n\n    password: {\n      length: {\n        minimum: 6\n      },\n      presence: {\n        allowEmpty: false\n      }\n    },\n\n    passwordConfirmation: {\n      equality: 'password',\n      length: {\n        minimum: 6\n      },\n      presence: {\n        allowEmpty: false\n      }\n    }\n  },\n\n  signIn: {\n    emailAddress: {\n      email: true,\n      presence: {\n        allowEmpty: false\n      }\n    },\n\n    password: {\n      length: {\n        minimum: 6\n      },\n      presence: {\n        allowEmpty: false\n      }\n    }\n  },\n\n  resetPassword: {\n    emailAddress: {\n      email: true,\n      presence: {\n        allowEmpty: false\n      }\n    }\n  },\n\n  addAvatar: {\n    avatar: {\n      presence: {\n        allowEmpty: false\n      },\n\n      url: {\n        message: \"^Avatar URL is not a valid URL\"\n      }\n    }\n  },\n\n  changeAvatar: {\n    avatar: {\n      presence: {\n        allowEmpty: false\n      },\n\n      url: {\n        message: \"^Avatar URL is not a valid URL\"\n      }\n    }\n  },\n\n  addDisplayName: {\n    displayName: {\n      presence: {\n        allowEmpty: false\n      }\n    }\n  },\n\n  changeDisplayName: {\n    displayName: {\n      presence: {\n        allowEmpty: false\n      }\n    }\n  },\n\n  addEmailAddress: {\n    emailAddress: {\n      email: true,\n      presence: {\n        allowEmpty: false\n      }\n    }\n  },\n};\n\nclass App extends Component {\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      primaryColor: defaultTheme.primaryColor,\n      secondaryColor: defaultTheme.secondaryColor,\n      type: defaultTheme.type,\n\n      isAuthReady: false,\n      isPerformingAuthAction: false,\n      isSignedIn: false,\n\n      user: null,\n      avatar: '',\n      displayName: '',\n      emailAddress: '',\n\n      signUpDialog: {\n        open: false\n      },\n\n      signInDialog: {\n        open: false\n      },\n\n      resetPasswordDialog: {\n        open: false\n      },\n\n      settingsDialog: {\n        open: false\n      },\n\n      addAvatarDialog: {\n        open: false,\n\n        errors: null\n      },\n\n      changeAvatarDialog: {\n        open: false,\n\n        errors: null\n      },\n\n      addDisplayNameDialog: {\n        open: false,\n\n        errors: null\n      },\n\n      changeDisplayNameDialog: {\n        open: false,\n\n        errors: null\n      },\n\n      addEmailAddressDialog: {\n        open: false,\n\n        errors: null\n      },\n\n      signOutDialog: {\n        open: false\n      },\n\n      snackbar: {\n        autoHideDuration: 0,\n        message: '',\n        open: false\n      }\n    };\n  }\n\n  /**\n   * Creates a new user account associated with the specified email address and password.\n   * @param emailAddress\n   * @param password\n   * @param passwordConfirmation\n   */\n  signUp = (emailAddress, password, passwordConfirmation) => {\n    if (this.state.isSignedIn) {\n      return;\n    }\n\n    if (!emailAddress || !password || !passwordConfirmation) {\n      return;\n    }\n\n    const errors = validate({\n      emailAddress,\n      password,\n      passwordConfirmation\n    }, constraints.signUp);\n\n    if (errors) {\n      return;\n    }\n\n    this.setState({\n      isPerformingAuthAction: true\n    }, () => {\n      auth.createUserWithEmailAndPassword(emailAddress, password).then((value) => {\n        this.closeSignUpDialog(() => {\n          this.openSnackbar(`Welcome to ${settings.name}`);\n        });\n      }).catch((reason) => {\n        const code = reason.code;\n        const message = reason.message;\n\n        switch (code) {\n          case 'auth/email-already-in-use':\n          case 'auth/invalid-email':\n          case 'auth/operation-not-allowed':\n          case 'auth/weak-password':\n            this.openSnackbar(message);\n            return;\n\n          default:\n            this.openSnackbar(message);\n            return;\n        }\n      }).finally(() => {\n        this.setState({\n          isPerformingAuthAction: false\n        });\n      });\n    });\n  };\n\n  /**\n   * Asynchronously signs in using an email and password.\n   * @param emailAddress\n   * @param password\n   */\n  signIn = (emailAddress, password) => {\n    if (this.state.isSignedIn) {\n      return;\n    }\n\n    if (!emailAddress || !password) {\n      return;\n    }\n\n    const errors = validate({\n      emailAddress,\n      password,\n    }, constraints.signIn);\n\n    if (errors) {\n      return;\n    }\n\n    this.setState({\n      isPerformingAuthAction: true\n    }, () => {\n      auth.signInWithEmailAndPassword(emailAddress, password).then((value) => {\n        this.closeSignInDialog(() => {\n          const user = value.user;\n          const displayName = user.displayName;\n          const emailAddress = user.email;\n\n          this.openSnackbar(`Signed in as ${displayName || emailAddress}`);\n        });\n      }).catch((reason) => {\n        const code = reason.code;\n        const message = reason.message;\n\n        switch (code) {\n          case 'auth/invalid-email':\n          case 'auth/user-disabled':\n          case 'auth/user-not-found':\n          case 'auth/wrong-password':\n            this.openSnackbar(message);\n            return;\n\n          default:\n            this.openSnackbar(message);\n            return;\n        }\n      }).finally(() => {\n        this.setState({\n          isPerformingAuthAction: false\n        });\n      });\n    });\n  };\n\n  /**\n   * Authenticates a Firebase client using a popup-based OAuth authentication flow.\n   * @param provider\n   */\n  signInWithProvider = (provider) => {\n    if (this.state.isSignedIn) {\n      return;\n    }\n\n    if (!provider) {\n      return;\n    }\n\n    this.setState({\n      isPerformingAuthAction: true\n    }, () => {\n      auth.signInWithPopup(provider).then((value) => {\n        this.closeSignUpDialog(() => {\n          this.closeSignInDialog(() => {\n            const user = value.user;\n            const displayName = user.displayName;\n            const emailAddress = user.email;\n\n            this.openSnackbar(`Signed in as ${displayName || emailAddress}`);\n          });\n        });\n      }).catch((reason) => {\n        const code = reason.code;\n        const message = reason.message;\n\n        switch (code) {\n          case 'auth/account-exists-with-different-credential':\n          case 'auth/auth-domain-config-required':\n          case 'auth/cancelled-popup-request':\n          case 'auth/operation-not-allowed':\n          case 'auth/operation-not-supported-in-this-environment':\n          case 'auth/popup-blocked':\n          case 'auth/popup-closed-by-user':\n          case 'auth/unauthorized-domain':\n            this.openSnackbar(message);\n            return;\n\n          default:\n            this.openSnackbar(message);\n            return;\n        }\n      }).finally(() => {\n        this.setState({\n          isPerformingAuthAction: false\n        });\n      });\n    });\n  };\n\n  /**\n   * Sends a password reset email to the given email address.\n   * @param emailAddress\n   */\n  resetPassword = (emailAddress) => {\n    if (this.state.isSignedIn) {\n      return;\n    }\n\n    if (!emailAddress) {\n      return;\n    }\n\n    const errors = validate({\n      emailAddress\n    }, constraints.resetPassword);\n\n    if (errors) {\n      return;\n    }\n\n    this.setState({\n      isPerformingAuthAction: true\n    }, () => {\n      auth.sendPasswordResetEmail(emailAddress).then(() => {\n        this.closeResetPasswordDialog(() => {\n          this.openSnackbar(`Password reset e-mail sent to ${emailAddress}`);\n        });\n      }).catch((reason) => {\n        const code = reason.code;\n        const message = reason.message;\n\n        switch (code) {\n          case 'auth/invalid-email':\n          case 'auth/missing-android-pkg-name':\n          case 'auth/missing-continue-uri':\n          case 'auth/missing-ios-bundle-id':\n          case 'auth/invalid-continue-uri':\n          case 'auth/unauthorized-continue-uri':\n          case 'auth/user-not-found':\n            this.openSnackbar(message);\n            return;\n\n          default:\n            this.openSnackbar(message);\n            return;\n        }\n      }).finally(() => {\n        this.setState({\n          isPerformingAuthAction: false\n        });\n      });\n    });\n  };\n\n  /**\n   * Sets an avatar.\n   */\n  addAvatar = () => {\n    const { user, isSignedIn, avatar } = this.state;\n\n    if (!user || !isSignedIn || !avatar) {\n      return;\n    }\n\n    if (user.photoURL) {\n      return;\n    }\n\n    const errors = validate({ avatar }, constraints.addAvatar);\n\n    if (errors) {\n      this.setState((state) => ({\n        addAvatarDialog: {\n          ...state.addAvatarDialog,\n          errors\n        }\n      }));\n\n      return;\n    }\n\n    this.setState({\n      isPerformingAuthAction: true\n    }, () => {\n      user.updateProfile({ photoURL: avatar }).then(() => {\n        this.closeAddAvatarDialog(() => {\n          this.openSnackbar('Avatar added');\n        });\n      }).catch((reason) => {\n        const code = reason.code;\n        const message = reason.message;\n\n        switch (code) {\n          default:\n            this.openSnackbar(message);\n            return;\n        }\n      }).finally(() => {\n        this.setState({\n          isPerformingAuthAction: false\n        });\n      });\n    });\n  };\n\n  /**\n   * Changes the current avatar.\n   */\n  changeAvatar = () => {\n    const { user, isSignedIn, avatar } = this.state;\n\n    if (!user || !isSignedIn || !avatar) {\n      return;\n    }\n\n    const errors = validate({ avatar }, constraints.changeAvatar);\n\n    if (errors) {\n      this.setState((state) => ({\n        changeAvatarDialog: {\n          ...state.changeAvatarDialog,\n          errors\n        }\n      }));\n\n      return;\n    }\n\n    if (user.photoURL === avatar) {\n      this.openSnackbar('Avatar already being used');\n\n      return;\n    }\n\n    this.setState({\n      isPerformingAuthAction: true\n    }, () => {\n      user.updateProfile({ photoURL: avatar }).then(() => {\n        this.closeChangeAvatarDialog(() => {\n          this.openSnackbar('Avatar changed');\n        });\n      }).catch((reason) => {\n        const code = reason.code;\n        const message = reason.message;\n\n        switch (code) {\n          default:\n            this.openSnackbar(message);\n            return;\n        }\n      }).finally(() => {\n        this.setState({\n          isPerformingAuthAction: false\n        });\n      });\n    });\n  };\n\n  /**\n   * Sets a display name.\n   */\n  addDisplayName = () => {\n    const { user, isSignedIn, displayName } = this.state;\n\n    if (!user || !isSignedIn || !displayName) {\n      return;\n    }\n\n    if (user.displayName) {\n      return;\n    }\n\n    const errors = validate({ displayName }, constraints.addDisplayName);\n\n    if (errors) {\n      this.setState((state) => ({\n        addDisplayNameDialog: {\n          ...state.addDisplayNameDialog,\n          errors\n        }\n      }));\n\n      return;\n    }\n\n    this.setState({\n      isPerformingAuthAction: true\n    }, () => {\n      user.updateProfile({ displayName }).then(() => {\n        this.closeAddDisplayNameDialog(() => {\n          this.openSnackbar('Display name added');\n        });\n      }).catch((reason) => {\n        const code = reason.code;\n        const message = reason.message;\n\n        switch (code) {\n          default:\n            this.openSnackbar(message);\n            return;\n        }\n      }).finally(() => {\n        this.setState({\n          isPerformingAuthAction: false\n        });\n      });\n    });\n  };\n\n  /**\n   * Changes the current display name.\n   */\n  changeDisplayName = () => {\n    const { user, isSignedIn, displayName } = this.state;\n\n    if (!user || !isSignedIn || !displayName) {\n      return;\n    }\n\n    const errors = validate({ displayName }, constraints.changeDisplayName);\n\n    if (errors) {\n      this.setState((state) => ({\n        changeDisplayNameDialog: {\n          ...state.changeDisplayNameDialog,\n          errors\n        }\n      }));\n\n      return;\n    }\n\n    if (displayName === user.displayName) {\n      this.openSnackbar(`Display name is already ${displayName}`);\n\n      return;\n    }\n\n    this.setState({\n      isPerformingAuthAction: true\n    }, () => {\n      user.updateProfile({ displayName }).then(() => {\n        this.closeChangeDisplayNameDialog(() => {\n          this.openSnackbar('Display name changed');\n        });\n      }).catch((reason) => {\n        const code = reason.code;\n        const message = reason.message;\n\n        switch (code) {\n          default:\n            this.openSnackbar(message);\n            return;\n        }\n      }).finally(() => {\n        this.setState({\n          isPerformingAuthAction: false\n        });\n      });\n    });\n  };\n\n  /**\n   * Sets an e-mail address.\n   */\n  addEmailAddress = () => {\n    const { user, isSignedIn, emailAddress } = this.state;\n\n    if (!user || !isSignedIn || !emailAddress) {\n      return;\n    }\n\n    if (user.email) {\n      return;\n    }\n\n    const errors = validate({ emailAddress }, constraints.addEmailAddress);\n\n    if (errors) {\n      this.setState((state) => ({\n        addEmailAddressDialog: {\n          ...state.addEmailAddressDialog,\n          errors\n        }\n      }));\n\n      return;\n    }\n\n    this.setState({\n      isPerformingAuthAction: true\n    }, () => {\n      user.updateEmail(emailAddress).then(() => {\n        this.closeAddEmailAddressDialog(() => {\n          this.openSnackbar('E-mail address added');\n        });\n      }).catch((reason) => {\n        const code = reason.code;\n        const message = reason.message;\n\n        switch (code) {\n          default:\n            this.openSnackbar(message);\n            return;\n        }\n      }).finally(() => {\n        this.setState({\n          isPerformingAuthAction: false\n        });\n      });\n    });\n  };\n\n  /**\n   * Sends a verification email to a user.\n   */\n  verifyEmailAddress = () => {\n    const { user, isSignedIn } = this.state;\n\n    if (!user || !user.email || !isSignedIn) {\n      return;\n    }\n\n    this.setState({\n      isPerformingAuthAction: true\n    }, () => {\n      user.sendEmailVerification().then(() => {\n        const emailAddress = user.email;\n\n        this.openSnackbar(`Verification e-mail sent to ${emailAddress}`);\n      }).catch((reason) => {\n        const code = reason.code;\n        const message = reason.message;\n\n        switch (code) {\n          case 'auth/missing-android-pkg-name':\n          case 'auth/missing-continue-uri':\n          case 'auth/missing-ios-bundle-id':\n          case 'auth/invalid-continue-uri':\n          case 'auth/unauthorized-continue-uri':\n            this.openSnackbar(message);\n            return;\n\n          default:\n            this.openSnackbar(message);\n            return;\n        }\n      }).finally(() => {\n        this.setState({\n          isPerformingAuthAction: false\n        });\n      });\n    });\n  };\n\n  /**\n   * Signs out the current user.\n   */\n  signOut = () => {\n    if (!this.state.isSignedIn) {\n      return;\n    }\n\n    this.setState({\n      isPerformingAuthAction: true\n    }, () => {\n      auth.signOut().then(() => {\n        this.closeSignOutDialog(() => {\n          this.openSnackbar('Signed out');\n        });\n      }).catch((reason) => {\n        const code = reason.code;\n        const message = reason.message;\n\n        switch (code) {\n          default:\n            this.openSnackbar(message);\n            return;\n        }\n      }).finally(() => {\n        this.setState({\n          isPerformingAuthAction: false\n        });\n      });\n    });\n  };\n\n  /**\n   * Changes the current theme. Theme is applied in real-time.\n   * @param palette\n   * @param removeLocalStorage\n   * @param callback\n   */\n  updateTheme = (palette, removeLocalStorage, callback) => {\n    const { primaryColor, secondaryColor, type } = this.state;\n\n    if (!palette.primaryColor) {\n      palette.primaryColor = primaryColor;\n    }\n\n    if (!palette.secondaryColor) {\n      palette.secondaryColor = secondaryColor;\n    }\n\n    if (!palette.type) {\n      palette.type = type;\n    }\n\n    theme = createMuiTheme({\n      palette: {\n        primary: colors.find(color => color.id === palette.primaryColor).import,\n        secondary: colors.find(color => color.id === palette.secondaryColor).import,\n        type: palette.type\n      },\n\n      typography: {\n        useNextVariants: true\n      }\n    });\n\n    this.setState({\n      primaryColor: palette.primaryColor,\n      secondaryColor: palette.secondaryColor,\n      type: palette.type\n    }, () => {\n      if (removeLocalStorage) {\n        localStorage.removeItem('theme');\n      } else {\n        localStorage.setItem('theme', JSON.stringify({\n          primaryColor: palette.primaryColor,\n          secondaryColor: palette.secondaryColor,\n          type: palette.type\n        }));\n      }\n\n      if (callback && typeof callback === 'function') {\n        callback();\n      }\n    });\n  };\n\n  /**\n   * Resets the current theme to the default one.\n   */\n  resetTheme = () => {\n    this.updateTheme({\n      primaryColor: defaultTheme.primaryColor,\n      secondaryColor: defaultTheme.secondaryColor,\n      type: defaultTheme.type\n    }, true, () => {\n      this.openSnackbar('Settings reset');\n    });\n  };\n\n  changePrimaryColor = (event) => {\n    const primaryColor = event.target.value;\n\n    this.updateTheme({\n      primaryColor\n    });\n  };\n\n  changeSecondaryColor = (event) => {\n    const secondaryColor = event.target.value;\n\n    this.updateTheme({\n      secondaryColor\n    });\n  };\n\n  changeType = (event) => {\n    const type = event.target.value;\n\n    this.updateTheme({\n      type\n    });\n  };\n\n  openSignUpDialog = () => {\n    this.setState({\n      signUpDialog: {\n        open: true\n      }\n    });\n  };\n\n  closeSignUpDialog = (callback) => {\n    this.setState({\n      signUpDialog: {\n        open: false\n      }\n    }, () => {\n      if (callback && typeof callback === 'function') {\n        callback();\n      }\n    });\n  };\n\n  openSignInDialog = () => {\n    this.setState({\n      signInDialog: {\n        open: true\n      }\n    });\n  };\n\n  closeSignInDialog = (callback) => {\n    this.setState({\n      signInDialog: {\n        open: false\n      }\n    }, () => {\n      if (callback && typeof callback === 'function') {\n        callback();\n      }\n    });\n  };\n\n  openResetPasswordDialog = () => {\n    this.setState({\n      resetPasswordDialog: {\n        open: true\n      }\n    });\n  };\n\n  closeResetPasswordDialog = (callback) => {\n    this.setState({\n      resetPasswordDialog: {\n        open: false\n      }\n    }, () => {\n      if (callback && typeof callback === 'function') {\n        callback();\n      }\n    });\n  };\n\n  openSettingsDialog = () => {\n    this.setState({\n      settingsDialog: {\n        open: true\n      }\n    });\n  };\n\n  closeSettingsDialog = (callback) => {\n    this.setState({\n      settingsDialog: {\n        open: false\n      }\n    }, () => {\n      if (callback && typeof callback === 'function') {\n        callback();\n      }\n    });\n  };\n\n  openAddAvatarDialog = () => {\n    this.setState({\n      addAvatarDialog: {\n        open: true\n      }\n    });\n  };\n\n  closeAddAvatarDialog = (callback) => {\n    this.setState({\n      addAvatarDialog: {\n        open: false\n      }\n    }, () => {\n      if (callback && typeof callback === 'function') {\n        callback();\n      }\n    });\n  };\n\n  openChangeAvatarDialog = () => {\n    this.setState({\n      changeAvatarDialog: {\n        open: true\n      }\n    });\n  };\n\n  closeChangeAvatarDialog = (callback) => {\n    this.setState({\n      changeAvatarDialog: {\n        open: false\n      }\n    }, () => {\n      if (callback && typeof callback === 'function') {\n        callback();\n      }\n    });\n  };\n\n  openAddDisplayNameDialog = () => {\n    this.setState({\n      addDisplayNameDialog: {\n        open: true\n      }\n    });\n  };\n\n  closeAddDisplayNameDialog = (callback) => {\n    this.setState({\n      addDisplayNameDialog: {\n        open: false\n      }\n    }, () => {\n      if (callback && typeof callback === 'function') {\n        callback();\n      }\n    });\n  };\n\n  openChangeDisplayNameDialog = () => {\n    this.setState({\n      changeDisplayNameDialog: {\n        open: true\n      }\n    });\n  };\n\n  closeChangeDisplayNameDialog = (callback) => {\n    this.setState({\n      changeDisplayNameDialog: {\n        open: false\n      }\n    }, () => {\n      if (callback && typeof callback === 'function') {\n        callback();\n      }\n    });\n  };\n\n  openAddEmailAddressDialog = () => {\n    this.setState({\n      addEmailAddressDialog: {\n        open: true\n      }\n    });\n  };\n\n  closeAddEmailAddressDialog = (callback) => {\n    this.setState({\n      addEmailAddressDialog: {\n        open: false\n      }\n    }, () => {\n      if (callback && typeof callback === 'function') {\n        callback();\n      }\n    });\n  };\n\n  openSignOutDialog = () => {\n    this.setState({\n      signOutDialog: {\n        open: true\n      }\n    });\n  };\n\n  closeSignOutDialog = (callback) => {\n    this.setState({\n      signOutDialog: {\n        open: false\n      }\n    }, () => {\n      if (callback && typeof callback === 'function') {\n        callback();\n      }\n    });\n  };\n\n  handleAvatarChange = (event) => {\n    const avatar = event.target.value;\n\n    this.setState({ avatar });\n  };\n\n  handleDisplayNameChange = (event) => {\n    const displayName = event.target.value;\n\n    this.setState({ displayName });\n  };\n\n  handleEmailAddressChange = (event) => {\n    const emailAddress = event.target.value;\n\n    this.setState({ emailAddress });\n  };\n\n  /**\n   * Opens a snackbar. Snackbars provide brief messages about app processes through a message.\n   */\n  openSnackbar = (message) => {\n    this.setState({\n      snackbar: {\n        autoHideDuration: readingTime(message).time * 2,\n        message,\n        open: true\n      }\n    });\n  };\n\n  /**\n   * Sets the `open` state of a snackbar to `false`. A direct response to the snackbar's `onClose` event.\n   * @param clearMessage Whether or not to clear the message of the snackbar.\n   */\n  closeSnackbar = (clearMessage = false) => {\n    const { snackbar } = this.state;\n\n    this.setState({\n      snackbar: {\n        message: clearMessage ? '' : snackbar.message,\n        open: false\n      }\n    });\n  };\n\n  render() {\n    // Properties\n    const {\n      primaryColor,\n      secondaryColor,\n      type,\n      isAuthReady,\n      isPerformingAuthAction,\n      isSignedIn,\n      user,\n      avatar,\n      displayName,\n      emailAddress\n    } = this.state;\n\n    // Dialogs\n    const {\n      signUpDialog,\n      signInDialog,\n      resetPasswordDialog,\n      settingsDialog,\n      addAvatarDialog,\n      changeAvatarDialog,\n      addDisplayNameDialog,\n      changeDisplayNameDialog,\n      addEmailAddressDialog,\n      signOutDialog\n    } = this.state;\n\n    const { snackbar } = this.state;\n\n    return (\n      <Router basename=\"/react-material-ui-firebase\">\n        <MuiThemeProvider theme={theme}>\n          <div style={{ minHeight: '100vh', backgroundColor: theme.palette.type === 'dark' ? '#303030' : '#fafafa' }}>\n            {!isAuthReady &&\n              <LaunchScreen />\n            }\n\n            {isAuthReady &&\n              <React.Fragment>\n                <Bar\n                  name={settings.name}\n\n                  isSignedIn={isSignedIn}\n                  isPerformingAuthAction={isPerformingAuthAction}\n\n                  user={user}\n\n                  onSignUpClick={this.openSignUpDialog}\n                  onSignInClick={this.openSignInDialog}\n\n                  onSettingsClick={this.openSettingsDialog}\n                  onSignOutClick={this.openSignOutDialog}\n                />\n\n                <Switch>\n                  <Route path=\"/\" exact render={() => (<HomeContent isSignedIn={isSignedIn} title={settings.name} />)} />\n                  <Route component={NotFoundContent} />\n                </Switch>\n\n                {isSignedIn &&\n                  <React.Fragment>\n                    <Hidden only=\"xs\">\n                      <SettingsDialog\n                        open={settingsDialog.open}\n\n                        user={user}\n                        isPerformingAuthAction={isPerformingAuthAction}\n                        colors={colors}\n                        types={types}\n                        primaryColor={primaryColor}\n                        secondaryColor={secondaryColor}\n                        type={type}\n                        defaultTheme={defaultTheme}\n\n                        onClose={this.closeSettingsDialog}\n                        onAddAvatarClick={this.openAddAvatarDialog}\n                        onChangeAvatarClick={this.openChangeAvatarDialog}\n                        onAddDisplayNameClick={this.openAddDisplayNameDialog}\n                        onChangeDisplayNameClick={this.openChangeDisplayNameDialog}\n                        onAddEmailAddressClick={this.openAddEmailAddressDialog}\n                        onVerifyEmailAddressClick={this.verifyEmailAddress}\n                        onPrimaryColorChange={this.changePrimaryColor}\n                        onSecondaryColorChange={this.changeSecondaryColor}\n                        onTypeChange={this.changeType}\n                        onResetClick={this.resetTheme}\n                      />\n                    </Hidden>\n\n                    <Hidden only={['sm', 'md', 'lg', 'xl']}>\n                      <SettingsDialog\n                        fullScreen\n                        open={settingsDialog.open}\n\n                        user={user}\n                        isPerformingAuthAction={isPerformingAuthAction}\n                        colors={colors}\n                        types={types}\n                        primaryColor={primaryColor}\n                        secondaryColor={secondaryColor}\n                        type={type}\n                        defaultTheme={defaultTheme}\n\n                        onClose={this.closeSettingsDialog}\n                        onAddAvatarClick={this.openAddAvatarDialog}\n                        onChangeAvatarClick={this.openChangeAvatarDialog}\n                        onAddDisplayNameClick={this.openAddDisplayNameDialog}\n                        onChangeDisplayNameClick={this.openChangeDisplayNameDialog}\n                        onAddEmailAddressClick={this.openAddEmailAddressDialog}\n                        onVerifyEmailAddressClick={this.verifyEmailAddress}\n                        onPrimaryColorChange={this.changePrimaryColor}\n                        onSecondaryColorChange={this.changeSecondaryColor}\n                        onTypeChange={this.changeType}\n                        onResetClick={this.resetTheme}\n                      />\n                    </Hidden>\n\n                    <Hidden only=\"xs\">\n                      <InputDialog\n                        open={addAvatarDialog.open}\n\n                        title=\"Add avatar\"\n                        contentText=\"Your avatar is used to represent you. It's visible to other users and can be changed any time.\"\n                        textField={\n                          <TextField\n                            autoComplete=\"photo\"\n                            autoFocus\n                            error={!!(addAvatarDialog.errors && addAvatarDialog.errors.avatar)}\n                            fullWidth\n                            helperText={(addAvatarDialog.errors && addAvatarDialog.errors.avatar) ? addAvatarDialog.errors.avatar[0] : ''}\n                            margin=\"normal\"\n                            onChange={this.handleAvatarChange}\n                            placeholder=\"Avatar URL\"\n                            required\n                            type=\"url\"\n                            value={avatar}\n                          />\n                        }\n                        okText=\"Add\"\n                        disableOkButton={!avatar || isPerformingAuthAction}\n                        highlightOkButton\n\n                        onClose={this.closeAddAvatarDialog}\n                        onExited={() => {\n                          this.setState({\n                            avatar: ''\n                          });\n                        }}\n\n                        onCancelClick={this.closeAddAvatarDialog}\n                        onOkClick={this.addAvatar}\n                      />\n                    </Hidden>\n\n                    <Hidden only={['sm', 'md', 'lg', 'xl']}>\n                      <InputDialog\n                        fullScreen\n                        open={addAvatarDialog.open}\n\n                        title=\"Add avatar\"\n                        contentText=\"Your avatar is used to represent you. It's visible to other users and can be changed any time.\"\n                        textField={\n                          <TextField\n                            autoComplete=\"photo\"\n                            autoFocus\n                            error={!!(addAvatarDialog.errors && addAvatarDialog.errors.avatar)}\n                            fullWidth\n                            helperText={(addAvatarDialog.errors && addAvatarDialog.errors.avatar) ? addAvatarDialog.errors.avatar[0] : ''}\n                            margin=\"normal\"\n                            onChange={this.handleAvatarChange}\n                            placeholder=\"Avatar URL\"\n                            required\n                            type=\"url\"\n                            value={avatar}\n                          />\n                        }\n                        okText=\"Add\"\n                        disableOkButton={!avatar || isPerformingAuthAction}\n                        highlightOkButton\n\n                        onClose={this.closeAddAvatarDialog}\n                        onExited={() => {\n                          this.setState({\n                            avatar: ''\n                          });\n                        }}\n\n                        onCancelClick={this.closeAddAvatarDialog}\n                        onOkClick={this.addAvatar}\n                      />\n                    </Hidden>\n\n                    <Hidden only=\"xs\">\n                      <InputDialog\n                        open={changeAvatarDialog.open}\n\n                        title=\"Change avatar\"\n                        contentText=\"Your avatar is used to represent you. It's visible to other users and can be changed any time.\"\n                        textField={\n                          <TextField\n                            autoComplete=\"photo\"\n                            autoFocus\n                            error={!!(changeAvatarDialog.errors && changeAvatarDialog.errors.avatar)}\n                            fullWidth\n                            helperText={(changeAvatarDialog.errors && changeAvatarDialog.errors.avatar) ? changeAvatarDialog.errors.avatar[0] : ''}\n                            margin=\"normal\"\n                            onChange={this.handleAvatarChange}\n                            placeholder=\"Avatar URL\"\n                            required\n                            type=\"url\"\n                            value={avatar}\n                          />\n                        }\n                        okText=\"Change\"\n                        disableOkButton={!avatar || isPerformingAuthAction}\n                        highlightOkButton\n\n                        onClose={this.closeChangeAvatarDialog}\n                        onExited={() => {\n                          this.setState({\n                            avatar: ''\n                          });\n                        }}\n\n                        onCancelClick={this.closeChangeAvatarDialog}\n                        onOkClick={this.changeAvatar}\n                      />\n                    </Hidden>\n\n                    <Hidden only={['sm', 'md', 'lg', 'xl']}>\n                      <InputDialog\n                        fullScreen\n                        open={changeAvatarDialog.open}\n\n                        title=\"Change avatar\"\n                        contentText=\"Your avatar is used to represent you. It's visible to other users and can be changed any time.\"\n                        textField={\n                          <TextField\n                            autoComplete=\"photo\"\n                            autoFocus\n                            error={!!(changeAvatarDialog.errors && changeAvatarDialog.errors.avatar)}\n                            fullWidth\n                            helperText={(changeAvatarDialog.errors && changeAvatarDialog.errors.avatar) ? changeAvatarDialog.errors.avatar[0] : ''}\n                            margin=\"normal\"\n                            onChange={this.handleAvatarChange}\n                            placeholder=\"Avatar URL\"\n                            required\n                            type=\"url\"\n                            value={avatar}\n                          />\n                        }\n                        okText=\"Change\"\n                        disableOkButton={!avatar || isPerformingAuthAction}\n                        highlightOkButton\n\n                        onClose={this.closeChangeAvatarDialog}\n                        onExited={() => {\n                          this.setState({\n                            avatar: ''\n                          });\n                        }}\n\n                        onCancelClick={this.closeChangeAvatarDialog}\n                        onOkClick={this.changeAvatar}\n                      />\n                    </Hidden>\n\n                    <Hidden only=\"xs\">\n                      <InputDialog\n                        open={addDisplayNameDialog.open}\n\n                        title=\"Add display name\"\n                        contentText=\"Your display name is used to represent you. It's visible to other users and can be changed any time.\"\n                        textField={\n                          <TextField\n                            autoComplete=\"name\"\n                            autoFocus\n                            error={!!(addDisplayNameDialog.errors && addDisplayNameDialog.errors.displayName)}\n                            fullWidth\n                            helperText={(addDisplayNameDialog.errors && addDisplayNameDialog.errors.displayName) ? addDisplayNameDialog.errors.displayName[0] : ''}\n                            margin=\"normal\"\n                            onChange={this.handleDisplayNameChange}\n                            placeholder=\"Display name\"\n                            required\n                            type=\"text\"\n                            value={displayName}\n                          />\n                        }\n                        okText=\"Add\"\n                        disableOkButton={!displayName || isPerformingAuthAction}\n                        highlightOkButton\n\n                        onClose={this.closeAddDisplayNameDialog}\n                        onExited={() => {\n                          this.setState({\n                            displayName: ''\n                          });\n                        }}\n\n                        onCancelClick={this.closeAddDisplayNameDialog}\n                        onOkClick={this.addDisplayName}\n                      />\n                    </Hidden>\n\n                    <Hidden only={['sm', 'md', 'lg', 'xl']}>\n                      <InputDialog\n                        fullScreen\n                        open={addDisplayNameDialog.open}\n\n                        title=\"Add display name\"\n                        contentText=\"Your display name is used to represent you. It's visible to other users and can be changed any time.\"\n                        textField={\n                          <TextField\n                            autoComplete=\"name\"\n                            autoFocus\n                            error={!!(addDisplayNameDialog.errors && addDisplayNameDialog.errors.displayName)}\n                            fullWidth\n                            helperText={(addDisplayNameDialog.errors && addDisplayNameDialog.errors.displayName) ? addDisplayNameDialog.errors.displayName[0] : ''}\n                            margin=\"normal\"\n                            onChange={this.handleDisplayNameChange}\n                            placeholder=\"Display name\"\n                            required\n                            type=\"text\"\n                            value={displayName}\n                          />\n                        }\n                        okText=\"Add\"\n                        disableOkButton={!displayName || isPerformingAuthAction}\n                        highlightOkButton\n\n                        onClose={this.closeAddDisplayNameDialog}\n                        onExited={() => {\n                          this.setState({\n                            displayName: ''\n                          });\n                        }}\n\n                        onCancelClick={this.closeAddDisplayNameDialog}\n                        onOkClick={this.addDisplayName}\n                      />\n                    </Hidden>\n\n                    <Hidden only=\"xs\">\n                      <InputDialog\n                        open={changeDisplayNameDialog.open}\n\n                        title=\"Change display name\"\n                        contentText=\"Your display name is used to represent you. It's visible to other users and can be changed any time.\"\n                        textField={\n                          <TextField\n                            autoComplete=\"name\"\n                            autoFocus\n                            error={!!(changeDisplayNameDialog.errors && changeDisplayNameDialog.errors.displayName)}\n                            fullWidth\n                            helperText={(changeDisplayNameDialog.errors && changeDisplayNameDialog.errors.displayName) ? changeDisplayNameDialog.errors.displayName[0] : ''}\n                            margin=\"normal\"\n                            onChange={this.handleDisplayNameChange}\n                            placeholder={user.displayName}\n                            required\n                            type=\"text\"\n                            value={displayName}\n                          />\n                        }\n                        okText=\"Change\"\n                        disableOkButton={!displayName || isPerformingAuthAction}\n                        highlightOkButton\n\n                        onClose={this.closeChangeDisplayNameDialog}\n                        onExited={() => {\n                          this.setState({\n                            displayName: ''\n                          });\n                        }}\n\n                        onCancelClick={this.closeChangeDisplayNameDialog}\n                        onOkClick={this.changeDisplayName}\n                      />\n                    </Hidden>\n\n                    <Hidden only={['sm', 'md', 'lg', 'xl']}>\n                      <InputDialog\n                        fullScreen\n                        open={changeDisplayNameDialog.open}\n\n                        title=\"Change display name\"\n                        contentText=\"Your display name is used to represent you. It's visible to other users and can be changed any time.\"\n                        textField={\n                          <TextField\n                            autoComplete=\"name\"\n                            autoFocus\n                            error={!!(changeDisplayNameDialog.errors && changeDisplayNameDialog.errors.displayName)}\n                            fullWidth\n                            helperText={(changeDisplayNameDialog.errors && changeDisplayNameDialog.errors.displayName) ? changeDisplayNameDialog.errors.displayName[0] : ''}\n                            margin=\"normal\"\n                            onChange={this.handleDisplayNameChange}\n                            placeholder={user.displayName}\n                            required\n                            type=\"text\"\n                            value={displayName}\n                          />\n                        }\n                        okText=\"Change\"\n                        disableOkButton={!displayName || isPerformingAuthAction}\n                        highlightOkButton\n\n                        onClose={this.closeChangeDisplayNameDialog}\n                        onExited={() => {\n                          this.setState({\n                            displayName: ''\n                          });\n                        }}\n\n                        onCancelClick={this.closeChangeDisplayNameDialog}\n                        onOkClick={this.changeDisplayName}\n                      />\n                    </Hidden>\n\n                    <Hidden only=\"xs\">\n                      <InputDialog\n                        open={addEmailAddressDialog.open}\n\n                        title=\"Add e-mail address\"\n                        contentText=\"Your e-mail address is used to identify you. It's not visible to other users and can be changed any time.\"\n                        textField={\n                          <TextField\n                            autoComplete=\"email\"\n                            autoFocus\n                            error={!!(addEmailAddressDialog.errors && addEmailAddressDialog.errors.emailAddress)}\n                            fullWidth\n                            helperText={(addEmailAddressDialog.errors && addEmailAddressDialog.errors.emailAddress) ? addEmailAddressDialog.errors.emailAddress[0] : ''}\n                            margin=\"normal\"\n                            onChange={this.handleEmailAddressChange}\n                            placeholder=\"E-mail address\"\n                            required\n                            type=\"email\"\n                            value={emailAddress}\n                          />\n                        }\n                        okText=\"Add\"\n                        disableOkButton={!emailAddress || isPerformingAuthAction}\n                        highlightOkButton\n\n                        onClose={this.closeAddEmailAddressDialog}\n                        onExited={() => {\n                          this.setState({\n                            emailAddress: ''\n                          });\n                        }}\n\n                        onCancelClick={this.closeAddEmailAddressDialog}\n                        onOkClick={this.addEmailAddress}\n                      />\n                    </Hidden>\n\n                    <Hidden only={['sm', 'md', 'lg', 'xl']}>\n                      <InputDialog\n                        fullScreen\n                        open={addEmailAddressDialog.open}\n\n                        title=\"Add e-mail address\"\n                        contentText=\"Your e-mail address is used to identify you. It's not visible to other users and can be changed any time.\"\n                        textField={\n                          <TextField\n                            autoComplete=\"email\"\n                            autoFocus\n                            error={!!(addEmailAddressDialog.errors && addEmailAddressDialog.errors.emailAddress)}\n                            fullWidth\n                            helperText={(addEmailAddressDialog.errors && addEmailAddressDialog.errors.emailAddress) ? addEmailAddressDialog.errors.emailAddress[0] : ''}\n                            margin=\"normal\"\n                            onChange={this.handleEmailAddressChange}\n                            placeholder=\"E-mail address\"\n                            required\n                            type=\"email\"\n                            value={emailAddress}\n                          />\n                        }\n                        okText=\"Add\"\n                        disableOkButton={!emailAddress || isPerformingAuthAction}\n                        highlightOkButton\n\n                        onClose={this.closeAddEmailAddressDialog}\n                        onExited={() => {\n                          this.setState({\n                            emailAddress: ''\n                          });\n                        }}\n\n                        onCancelClick={this.closeAddEmailAddressDialog}\n                        onOkClick={this.addEmailAddress}\n                      />\n                    </Hidden>\n\n                    <ConfirmationDialog\n                      open={signOutDialog.open}\n\n                      title=\"Sign out?\"\n                      contentText=\"While signed out you are unable to manage your profile and conduct other activities that require you to be signed in.\"\n                      okText=\"Sign Out\"\n                      disableOkButton={isPerformingAuthAction}\n                      highlightOkButton\n\n                      onClose={this.closeSignOutDialog}\n                      onCancelClick={this.closeSignOutDialog}\n                      onOkClick={this.signOut}\n                    />\n                  </React.Fragment>\n                }\n\n                {!isSignedIn &&\n                  <React.Fragment>\n                    <Hidden only=\"xs\">\n                      <SignUpDialog\n                        open={signUpDialog.open}\n\n                        isPerformingAuthAction={isPerformingAuthAction}\n                        constraints={constraints.signUp}\n\n                        signUp={this.signUp}\n\n                        onClose={this.closeSignUpDialog}\n                        onAuthProviderClick={this.signInWithProvider}\n                      />\n                    </Hidden>\n\n                    <Hidden only={['sm', 'md', 'lg', 'xl']}>\n                      <SignUpDialog\n                        fullScreen\n                        open={signUpDialog.open}\n\n                        isPerformingAuthAction={isPerformingAuthAction}\n                        constraints={constraints.signUp}\n\n                        signUp={this.signUp}\n\n                        onClose={this.closeSignUpDialog}\n                        onAuthProviderClick={this.signInWithProvider}\n                      />\n                    </Hidden>\n\n                    <Hidden only=\"xs\">\n                      <SignInDialog\n                        open={signInDialog.open}\n\n                        isPerformingAuthAction={isPerformingAuthAction}\n                        constraints={constraints.signIn}\n\n                        signIn={this.signIn}\n\n                        onClose={this.closeSignInDialog}\n                        onAuthProviderClick={this.signInWithProvider}\n                        onResetPasswordClick={this.openResetPasswordDialog}\n                      />\n                    </Hidden>\n\n                    <Hidden only={['sm', 'md', 'lg', 'xl']}>\n                      <SignInDialog\n                        fullScreen\n                        open={signInDialog.open}\n\n                        isPerformingAuthAction={isPerformingAuthAction}\n                        constraints={constraints.signIn}\n\n                        signIn={this.signIn}\n\n                        onClose={this.closeSignInDialog}\n                        onAuthProviderClick={this.signInWithProvider}\n                        onResetPasswordClick={this.openResetPasswordDialog}\n                      />\n                    </Hidden>\n\n                    <ResetPasswordDialog\n                      open={resetPasswordDialog.open}\n\n                      isPerformingAuthAction={isPerformingAuthAction}\n                      constraints={constraints.resetPassword}\n\n                      resetPassword={this.resetPassword}\n\n                      onClose={this.closeResetPasswordDialog}\n                    />\n                  </React.Fragment>\n                }\n\n                <Snackbar\n                  autoHideDuration={snackbar.autoHideDuration}\n                  message={snackbar.message}\n                  open={snackbar.open}\n                  onClose={this.closeSnackbar}\n                />\n              </React.Fragment>\n            }\n          </div>\n        </MuiThemeProvider>\n      </Router>\n    );\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    const theme = JSON.parse(localStorage.getItem('theme'));\n\n    if (theme) {\n      this.updateTheme(theme);\n    }\n\n    this.removeAuthObserver = firebase.auth().onAuthStateChanged((user) => {\n      if (this._isMounted) {\n        this.setState({\n          isAuthReady: true,\n          isSignedIn: !!user,\n          user\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n\n    this.removeAuthObserver();\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-roboto';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}